// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BulkInsertBooksParams struct {
	UserID      pgtype.Int4 `json:"user_id"`
	Title       pgtype.Text `json:"title"`
	Description pgtype.Text `json:"description"`
}

const countBooksByUserId = `-- name: CountBooksByUserId :one
SELECT count(*) FROM BOOKS WHERE user_id = $1
`

func (q *Queries) CountBooksByUserId(ctx context.Context, userID pgtype.Int4) (int64, error) {
	row := q.db.QueryRow(ctx, countBooksByUserId, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findBooksByUserId = `-- name: FindBooksByUserId :many
SELECT id, user_id, title, description, created_at, updated_at, deleted_at FROM books WHERE user_id = $1 LIMIT $2 OFFSET $3
`

type FindBooksByUserIdParams struct {
	UserID pgtype.Int4 `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) FindBooksByUserId(ctx context.Context, arg FindBooksByUserIdParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, findBooksByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookById = `-- name: GetBookById :one
SELECT id, user_id, title, description, created_at, updated_at, deleted_at FROM books WHERE id=$1 LIMIT 1
`

func (q *Queries) GetBookById(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBookById, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password_hash, email, created_at, updated_at, status, verified, verification_token, password_reset_token, first_name, last_name, date_of_birth, gender, profile_picture FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Verified,
		&i.VerificationToken,
		&i.PasswordResetToken,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.ProfilePicture,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password_hash, email, created_at, updated_at, status, verified, verification_token, password_reset_token, first_name, last_name, date_of_birth, gender, profile_picture FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Verified,
		&i.VerificationToken,
		&i.PasswordResetToken,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.ProfilePicture,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, email, created_at, updated_at, status, verified, verification_token, password_reset_token, first_name, last_name, date_of_birth, gender, profile_picture FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Verified,
		&i.VerificationToken,
		&i.PasswordResetToken,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.ProfilePicture,
	)
	return i, err
}

const insertBook = `-- name: InsertBook :one
INSERT INTO books (
    user_id,
    title,
    description
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, title, description, created_at, updated_at, deleted_at
`

type InsertBookParams struct {
	UserID      pgtype.Int4 `json:"user_id"`
	Title       pgtype.Text `json:"title"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) InsertBook(ctx context.Context, arg InsertBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, insertBook, arg.UserID, arg.Title, arg.Description)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
    username,
    password_hash,
    email,
    status,
    verified,
    verification_token,
    password_reset_token,
    first_name,
    last_name,
    date_of_birth,
    gender,
    profile_picture
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, username, password_hash, email, created_at, updated_at, status, verified, verification_token, password_reset_token, first_name, last_name, date_of_birth, gender, profile_picture
`

type InsertUserParams struct {
	Username           string         `json:"username"`
	PasswordHash       string         `json:"password_hash"`
	Email              string         `json:"email"`
	Status             NullUserStatus `json:"status"`
	Verified           pgtype.Bool    `json:"verified"`
	VerificationToken  pgtype.Text    `json:"verification_token"`
	PasswordResetToken pgtype.Text    `json:"password_reset_token"`
	FirstName          pgtype.Text    `json:"first_name"`
	LastName           pgtype.Text    `json:"last_name"`
	DateOfBirth        pgtype.Date    `json:"date_of_birth"`
	Gender             pgtype.Text    `json:"gender"`
	ProfilePicture     pgtype.Text    `json:"profile_picture"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.Status,
		arg.Verified,
		arg.VerificationToken,
		arg.PasswordResetToken,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Gender,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Verified,
		&i.VerificationToken,
		&i.PasswordResetToken,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.ProfilePicture,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    username=$2,
    password_hash=$3,
    email=$4,
    status=$5,
    verified=$6,
    verification_token=$7,
    password_reset_token=$8,
    first_name=$8,
    last_name=$9,
    date_of_birth=$9,
    gender=$10,
    profile_picture=$11
WHERE id=$1
`

type UpdateUserParams struct {
	ID                 int32          `json:"id"`
	Username           string         `json:"username"`
	PasswordHash       string         `json:"password_hash"`
	Email              string         `json:"email"`
	Status             NullUserStatus `json:"status"`
	Verified           pgtype.Bool    `json:"verified"`
	VerificationToken  pgtype.Text    `json:"verification_token"`
	PasswordResetToken pgtype.Text    `json:"password_reset_token"`
	LastName           pgtype.Text    `json:"last_name"`
	Gender             pgtype.Text    `json:"gender"`
	ProfilePicture     pgtype.Text    `json:"profile_picture"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.Status,
		arg.Verified,
		arg.VerificationToken,
		arg.PasswordResetToken,
		arg.LastName,
		arg.Gender,
		arg.ProfilePicture,
	)
	return err
}

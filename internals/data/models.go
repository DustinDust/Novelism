// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package data

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserStatus string

const (
	UserStatusActive  UserStatus = "active"
	UserStatusIdle    UserStatus = "idle"
	UserStatusDeleted UserStatus = "deleted"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type Visibility string

const (
	VisibilityHidden  Visibility = "hidden"
	VisibilityVisible Visibility = "visible"
)

func (e *Visibility) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Visibility(s)
	case string:
		*e = Visibility(s)
	default:
		return fmt.Errorf("unsupported scan type for Visibility: %T", src)
	}
	return nil
}

type NullVisibility struct {
	Visibility Visibility `json:"visibility"`
	Valid      bool       `json:"valid"` // Valid is true if Visibility is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVisibility) Scan(value interface{}) error {
	if value == nil {
		ns.Visibility, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Visibility.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVisibility) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Visibility), nil
}

type Book struct {
	ID          int32            `db:"id" json:"id"`
	UserID      pgtype.Int4      `db:"user_id" json:"user_id"`
	Title       pgtype.Text      `db:"title" json:"title"`
	Description pgtype.Text      `db:"description" json:"description"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt   pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
	Cover       pgtype.Text      `db:"cover" json:"cover"`
	Visibility  NullVisibility   `db:"visibility" json:"visibility"`
}

type Chapter struct {
	ID          int32            `db:"id" json:"id"`
	BookID      pgtype.Int4      `db:"book_id" json:"book_id"`
	AuthorID    pgtype.Int4      `db:"author_id" json:"author_id"`
	Title       pgtype.Text      `db:"title" json:"title"`
	Description pgtype.Text      `db:"description" json:"description"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt   pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}

type Content struct {
	ID          int32            `db:"id" json:"id"`
	ChapterID   pgtype.Int4      `db:"chapter_id" json:"chapter_id"`
	TextContent pgtype.Text      `db:"text_content" json:"text_content"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt   pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}

type ContentVersion struct {
	ID          int32            `db:"id" json:"id"`
	ContentID   int32            `db:"content_id" json:"content_id"`
	TextContent string           `db:"text_content" json:"text_content"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UserID      int32            `db:"user_id" json:"user_id"`
}

type User struct {
	ID                 int32            `db:"id" json:"id"`
	Username           string           `db:"username" json:"username"`
	PasswordHash       string           `db:"password_hash" json:"password_hash"`
	Email              string           `db:"email" json:"email"`
	CreatedAt          pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	Status             NullUserStatus   `db:"status" json:"status"`
	Verified           pgtype.Bool      `db:"verified" json:"verified"`
	VerificationToken  pgtype.Text      `db:"verification_token" json:"verification_token"`
	PasswordResetToken pgtype.Text      `db:"password_reset_token" json:"password_reset_token"`
	FirstName          pgtype.Text      `db:"first_name" json:"first_name"`
	LastName           pgtype.Text      `db:"last_name" json:"last_name"`
	DateOfBirth        pgtype.Date      `db:"date_of_birth" json:"date_of_birth"`
	Gender             pgtype.Text      `db:"gender" json:"gender"`
	ProfilePicture     pgtype.Text      `db:"profile_picture" json:"profile_picture"`
}
